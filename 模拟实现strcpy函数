void string_copy(char* dest, char* src)
{
	while (*src != '\0')
	{
		*dest = *src;//依次将b i t放入arr1
		dest++;
		src++;

	}
	*dest = *src;//将\0放入arr1
}

优化
void string_copy(char* dest, char* src)
{
	while (*src != '\0')
	{
		*dest++ = *src++;//依次将b i t放入arr1

	}
	*dest = *src;//将\0放入arr1
}

再次优化
void string_copy(char* dest, char* src)
{
	while (*dest++ = *src++)
	{
		;//依次将b i t放入arr1

	}
}

再次优化，当传入参数为NULL时进行判断
void string_copy(char* dest, char* src)
{
	if (dest != NULL && src != NULL)//无法给出NULL指针的位置
	{
		while (*dest++ = *src++)
		{
			;//依次将b i t放入arr1

		}
	}
}

#include<assert.h>

//再次优化
void string_copy(char* dest, char* src)
{
	assert(dest != NULL);//断言,若括号内的表达式为真不做任何动作，若括号内的表达式为假，则报错
	assert(src != NULL);
	while (*dest++ = *src++)
	{
		;//依次将b i t放入arr1

	}
}

再次优化
char* string_copy(char* dest, const char* src)//防止将源地址和目的地址写反而使程序出现bug
{
	char* ret = dest;
	assert(dest != NULL);//断言,若括号内的表达式为真不做任何动作，若括号内的表达式为假，则报错
	assert(src != NULL);
	while (*dest++ = *src++)//把src指向的字符串拷贝到dest指向的空间，包含'\0'字符
	{
		;//依次将b i t放入arr1

	}
	return ret;
}

int main()
{
	//strcpy，字符串拷贝
	char arr1[] = "####################";
	char arr2[] = "bit";
	//strcpy(arr1, arr2);
	printf("%s\n", string_copy(arr1, arr2));
	return 0;
}
